name: Echollama Verbose Integration Test

on: [push, pull_request]

jobs:
  live-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build echollama
        run: go build -o echollama .

      - name: Install and configure nginx proxy
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx
          # Create nginx config for universal proxy redirect (0.0.0.0 â†’ 127.0.0.1)
          sudo tee /etc/nginx/sites-available/echollama-proxy > /dev/null <<EOF
          server {
            listen 11434;                     # Listen on all interfaces
            server_name _;                    # Match any host
            location / {
              proxy_pass http://127.0.0.1:11435;
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$scheme;
            }
          }
          EOF
          # Enable the configuration
          sudo ln -sf /etc/nginx/sites-available/echollama-proxy \
            /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          # Test and start nginx
          sudo nginx -t
          sudo systemctl start nginx

      - name: Start echollama server (background on port 11435)
        run: |
          OLLAMA_HOST=127.0.0.1:11435 ./echollama serve &
          sleep 8

      - name: Confirm echollama server is live
        run: |
          sleep 2
          curl -v http://127.0.0.1:11435/healthz || (echo "Server not responding on health check"; exit 1)

      - name: Load tiny test model (via proxy)
        run: |
          OLLAMA_HOST=127.0.0.1:11435 ./echollama pull qwen2.5:0.5b
          # Store model info in models directory to show it's "permanently" available
          mkdir -p models
          echo "qwen2.5:0.5b" > models/active-test-model.txt
          sleep 2

      - name: Send timestamped JSON requests (verbose)
        run: |
          TS1=$(date --iso-8601=ns)
          TS2=$(date --iso-8601=ns)
          # Verbose curl for first timestamp
          curl -v -X POST http://localhost:11434/api/generate \
            -H 'Content-Type: application/json' \
            -d '{
                  "model": "qwen2.5:0.5b",
                  "prompt": "TIMESTAMP1: '$TS1'",
                  "stream": false
                }' | tee response1.json
          # Verbose curl for second timestamp
          curl -v -X POST http://localhost:11434/api/generate \
            -H 'Content-Type: application/json' \
            -d '{
                  "model": "qwen2.5:0.5b",
                  "prompt": "TIMESTAMP2: '$TS2'",
                  "stream": false
                }' | tee response2.json

      - name: Show full JSON responses
        run: |
          cat response*.json

      - name: Show token info for both responses
        run: |
          jq .tokens response1.json
          jq .tokens response2.json

      - name: End-of-workflow verification (fail if responses missing tokens)
        run: |
          test "$(jq '.tokens | length' response1.json)" -gt 0
          test "$(jq '.tokens | length' response2.json)" -gt 0
